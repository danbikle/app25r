
%link(href="/graph.css" rel="stylesheet" type="text/css")/
%link(href="/detail.css" rel="stylesheet" type="text/css")/

%script(src="/d3.v3.min.js")
%script(src="/rickshaw.min.js")

:css
  #a_spinner {animation: blinker 1s linear infinite;}
  @keyframes blinker {50% { opacity: 0.0; }}

%h1 Chart
This is a chart of
=params[:tkr]

%br/
%br/

/ The div below, depends on d3.v3.min.js
#a_spinner
/ The div below, depends on rickshaw.min.js
#my_rickshawchart

:javascript
  var mymsg = d3.select('#a_spinner').html('<h2>Loading...</h2><img src="/spinner.gif"></img>');
  var rows4chart1 = [];
  var rows4chart2 = [];
  var rows        = [];
  var rowv        = {};

  d3.json("/tkrs/data/#{params[:tkr]}",function(error, rows) {
    if (error) throw error;
    rows.forEach(function(row) {
      var udate     = Date.parse(row[0])/1000;
      var cls_price =     Number(row[4]);
      rows4chart1.push({x:udate,y:cls_price});
    });

    // Reorder rows so I have oldest first.
    var rownum = rows4chart1.length;
    rows4chart1.forEach(function(){
      rownum -= 1;
      rows4chart2.push(rows4chart1[rownum]);
    });

    // I should get the min/max value of the price to help draw the chart:
    var chartmin = rows4chart1[0].cls_price;
    var chartmax = rows4chart1[0].cls_price;
    rows4chart1.forEach(function(row){
      if (chartmin > row.cls_price) chartmin = row.cls_price;
      if (chartmax < row.cls_price) chartmax = row.cls_price;
    });
    chartmin = 0.8 * chartmin;
    chartmax = 1.2 * chartmax;

    var graph = new Rickshaw.Graph( {
      renderer: 'scatterplot',
      width: 800, 
      height: 400, 
      min: chartmin,
      max: chartmax,
      element: document.querySelector("#my_rickshawchart"), 
      series: [{
        name: "p",
        color: 'steelblue',
        data: rows4chart2
      }]
    });
    var xAxis = new Rickshaw.Graph.Axis.Time({graph: graph});
    var yAxis = new Rickshaw.Graph.Axis.Y({
      graph: graph,
    });
    var hoverDetail = new Rickshaw.Graph.HoverDetail( {graph: graph});

    // Give data some time to accumulate, then render:
    setTimeout(function(){
      graph.render();
      mymsg.remove();
    },4000);
  });
